name: Build, Push, and Test containers

on:
  workflow_run:
    workflows: ["Build, Push, and Test containers"]
    types:
      - completed

jobs:

  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push webscraper image
      uses: docker/build-push-action@v3
      with:
        context: ./scrapping
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/webscraper:${{ github.run_id }}

    - name: Build and push postgres image
      uses: docker/build-push-action@v3
      with:
        context: ./db
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/mypostgres:${{ github.run_id }}


    - name: Build and push airflow image
      uses: docker/build-push-action@v3
      with:
        context: ./airflow
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/airflow:${{ github.run_id }}

  tests:
    needs: build-and-push
    runs-on: ubuntu-latest  

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name : create webscraper network
      run: docker network create webscraper_network

    - name : create network network
      run: docker network create airflow_network

    ###### PostgreSQL container ######

    - name : Run postgres container
      run: |
        docker run -d \
          -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
          -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
          -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
          -v postgres_data:/var/lib/postgresql/data \
          --name mypostgres \
          ${{ secrets.DOCKERHUB_USERNAME }}/mypostgres:${{ github.run_id }}

    - name: Check if PostgreSQL container is running
      run: |
        if [ -z "$(docker ps -q --filter 'name=mypostgres')" ]; then
          echo "PostgreSQL container is not running"
          exit 1
        else
          echo "PostgreSQL container is running"
        fi

    - name: Wait for PostgreSQL to be ready
      run: |
        until docker exec mypostgres pg_isready -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }}; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 5
        done

    - name: Test PostgreSQL connection
      run: |
        docker exec mypostgres pg_isready -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }}

    - name: Check tables in database
      run: |
        docker exec mypostgres psql -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }} -c "\dt"


    ###### Webscrapping container ######

    - name: Run webscrapping container
      run: |
        docker run -d \
          -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          -e AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }} \
          -e S3_BUCKET_NAME=jobscrappingbucket \
          --name webscraper_container \
          ${{ secrets.DOCKERHUB_USERNAME }}/webscraper:${{ github.run_id }}

    - name: Check running container
      run: |
        container_id=$(docker ps -q --filter "name=webscraper_container")
        if [ -z "$container_id" ]; then
          echo "Container is not running"
          exit 1
        fi

        container_status=$(docker inspect --format '{{ .State.Status }}' $container_id)
        if [ "$container_status" != "running" ]; then
          echo "Container is not running, status is $container_status"
          exit 1
        else
          echo "Container is running"
        fi

    - name: Verify crontab in container
      run: |
        docker exec webscraper_container crontab -l > container_crontab
        diff scrapping/crontab container_crontab
    
    
    ###### Airflow stack containers ######

    - name: Run airflow_postgres container
      run: |
        docker run -d \
          -e POSTGRES_USER=airflow \
          -e POSTGRES_PASSWORD=airflow \
          -e POSTGRES_DB=airflow \
          -v airflow_pgdata:/var/lib/postgresql/data \
          --name airflow_postgres \
          --network airflow_network \
          postgres:14.1-alpine 

    - name: Run airflow-webserver container
      run: |
        docker run -d \
          -e AIRFLOW__CORE__EXECUTOR=LocalExecutor \
          -e AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow_postgres/airflow \
          -e AIRFLOW__CORE__FERNET_KEY='L_x43MRdzsoGOzCGwqcLhcpOZ6fQMrvNw_AT89oKdl4=' \
          -e AIRFLOW__WEBSERVER__SECRET_KEY='YOUR_SECRET_KEY_HERE' \
          -e AIRFLOW__CORE__LOAD_EXAMPLES='false' \
          --env-file .env \
          --name airflow_webserver \
          --network airflow_network \
          -p 8082:8080 \
          --health-cmd="[ -f /opt/airflow/airflow-webserver.pid ]" \
          --health-interval=30s \
          --health-timeout=30s \
          --health-retries=3 \
          --depends-on airflow_postgres \
          ${{ secrets.DOCKERHUB_USERNAME }}/airflow:${{ github.run_id }} 
          airflow webserver

    - name: Run airflow-scheduler container
      run: |
        docker run -d \
          -e AIRFLOW__CORE__EXECUTOR=LocalExecutor \
          -e AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow_postgres/airflow \
          -e AIRFLOW__CORE__FERNET_KEY='L_x43MRdzsoGOzCGwqcLhcpOZ6fQMrvNw_AT89oKdl4=' \
          -e AIRFLOW__CORE__LOAD_EXAMPLES='false' \
          -v ./airflow/dags:/opt/airflow/dags \
          -v ./airflow/utils:/opt/airflow/utils \
          --name airflow_scheduler \
          --network airflow_network \
          --depends-on airflow_postgres \
          ${{ secrets.DOCKERHUB_USERNAME }}/airflow:${{ github.run_id }} 
          airflow scheduler

    - name: Check if Airflow containers are running
      run: |
        if [ -z "$(docker ps -q --filter 'name=airflow_webserver')" ]; then
          echo "Airflow webserver container is not running"
          exit 1
        else
          echo "Airflow webserver container is running"
        fi

        if [ -z "$(docker ps -q --filter 'name=airflow_scheduler')" ]; then
          echo "Airflow scheduler container is not running"
          exit 1
        else
          echo "Airflow scheduler container is running"
        fi
    
    - name: Run dag tests
      run: |
        docker exec airflow_webserver cd /opt/airflow/dags && python s3_to_db.py