---
- name: Pull images and deploy containers on VPS
  hosts: vps
  gather_facts: false
  become: true

  tasks:

    - name: Pull Postgres image 
      community.docker.docker_image:
        name: "{{ dockerhub_username }}/mypostgres:{{ push_id }}"
        source: pull
    
    - name: Pull Webscraper image
      community.docker.docker_image:
        name: "{{ dockerhub_username }}/webscraper:{{ push_id }}"
        source: pull

    - name: Prune all unused images
      community.docker.docker_prune:
        images: yes

    - name: Create a volume for Postgres data
      community.docker.docker_volume:
        name: postgres_data
        state: present

    - name: Stop and remove existing Postgres container
      community.docker.docker_container:
        name: mypostgres
        state: absent

    - name: Stop and remove existing Webscraper container
      community.docker.docker_container:
        name: webscraper
        state: absent

    - name: Create network for the containers
      community.docker.docker_network:
        name: webscraper_network
        state: present

    - name: Run Postgres container on VPS
      community.docker.docker_container:
        name: mypostgres
        image: "{{ dockerhub_username }}/mypostgres:{{ push_id }}"
        state: started
        restart_policy: always
        volumes:
          - postgres_data:/var/lib/postgresql/data
        env:
          POSTGRES_USER: "{{ postgres_user }}"
          POSTGRES_PASSWORD: "{{ postgres_password }}"
          POSTGRES_DB: "{{ postgres_db }}"
        networks:
          - name: webscraper_network

    - name: Run Webscraper containers on VPS
      community.docker.docker_container:
        name: webscraper
        image: "{{ dockerhub_username }}/webscraper:{{ push_id }}"
        state: started
        restart_policy: always
        image_name_mismatch: recreate
        env:
          AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
          AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
          S3_BUCKET_NAME: "{{ s3_bucket_name }}"
          DB_HOST: "mypostgres"
          DB_PORT: "5432"
          DB_NAME: "{{ postgres_db }}"
        networks:
          - name: webscraper_network

    - name: Grab container status
      community.docker.docker_container_info:
        name: webscraper
      register: container_info

    - name: Ensure the container is running
      assert:
        that:
          - container_info.container.State.Running
        msg: "The webscraper container is not running!"

    - name: Check environment variables inside the container
      shell: |
        docker exec webscraper python3 -c "import os; assert os.environ['AWS_ACCESS_KEY_ID'] == '{{ aws_access_key_id }}'"
        docker exec webscraper python3 -c "import os; assert os.environ['AWS_SECRET_ACCESS_KEY'] == '{{ aws_secret_access_key }}'"
        docker exec webscraper python3 -c "import os; assert os.environ['S3_BUCKET_NAME'] == '{{ s3_bucket_name }}'"

      ignore_errors: yes
